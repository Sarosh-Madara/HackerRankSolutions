import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'lonelyinteger' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

    public static int lonelyinteger(List<Integer> a) {
        HashMap<Integer,Integer> valueCount = new HashMap<>();
        for (int i = 0; i < a.size(); i++) {
            if(valueCount.containsKey(a.get(i))){
                int count = valueCount.get(a.get(i));
                valueCount.remove(a.get(i),1);
            }else {
                valueCount.put(a.get(i),1);
            }
        }
        Collection<Integer> values = valueCount.values();
        // // for ( int i = 0; i < values.size(); i++) {
        //     Iterator<Integer> iter = values.iterator();
        //     Integer counter = 0;
        //     while(iter.hasNext()){
        //         counter++;
        //         Integer valueToEvaluate = iter.next();
        //         if(valueToEvaluate == 1){
        //             return valueCount.cu
        //         }
        //     }
        // }
        
        return valueCount.keySet().iterator().next();
        
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> a = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.lonelyinteger(a);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
