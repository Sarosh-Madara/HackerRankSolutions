import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the palindromeIndex function below.
    static int palindromeIndex(String s) {
        int palindromeIndex = -1;
        int len = s.length();
        for ( int i = 0; i< len / 2; i++){
            if(s.charAt(i) != s.charAt(len - i - 1)){
                if ( i+1 < len){
                    boolean isValidPalindrome = isValidPalindrome(s.substring(i+1, len-i));
                    if(isValidPalindrome){
                        return i;
                    }
                    return len - i - 1;
                }
            }
        }
        return palindromeIndex;
    }
    
    static boolean isValidPalindrome(String s){
        int len = s.length();
        for ( int i = 0; i< len / 2; i++){
            if(s.charAt(i) != s.charAt(len - i - 1)){
                return false;
            }
            
        }
            
        return true;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String s = scanner.nextLine();

            int result = palindromeIndex(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
