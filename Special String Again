import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the substrCount function below.
    static long substrCount(int n, String s) {
        
        List<String> spStrList = new ArrayList();
        
            String newSpBuild = "";
        for(int i=0; i<s.length(); i++){
            
            
            
            for(int j=i; j<s.length(); j++){
                
                if(i == j){
                    
                    spStrList.add(""+s.charAt(j));
                    newSpBuild += s.charAt(j);
                    
                }else{
                    
                    newSpBuild += s.charAt(j);
                    
                    if(isPalindrome(newSpBuild)){
                        spStrList.add(newSpBuild);
                    }
                    
                }
                
            }
            newSpBuild = "";
        }
        
        System.out.print(spStrList.toString());
        
        return spStrList.size();
    }
    
     public static boolean isPalindrome(String original){
           String variable = original;

            StringBuffer rev = new StringBuffer(variable).reverse(); 

        String strRev = rev.toString(); 

    return variable.equalsIgnoreCase(strRev);
    
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String s = scanner.nextLine();

        long result = substrCount(n, s);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
